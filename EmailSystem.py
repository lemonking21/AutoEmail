import re
from tkinter import Button, Menu, Toplevel, Label, Text, PanedWindow , VERTICAL, END, messagebox, Tk, ttk
from tkinter.filedialog import askopenfilename
import smtplib
import pandas as pd
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import datetime

#############################################################
#############################################################
#Created By Kyle Howard Krug
#Created ON 7/15/2019
#Autoemailing system, created to send an autogenerated notification to clients
#Last updated on 7/15/2019
#############################################################
#############################################################
#Global Varibles
filename, fname, lname, email = '', '' ,'' ,''
#############################################################
def file_update(i):
    name = select_file()
    i.config(state= 'normal')
    i.delete('1.0', END)
    i.insert('1.0',name)
    i.config(state= 'disable')
#############################################################
# Template for a the main window
#############################################################
def main_win(i):
    i.title('Auto Email')
    p = PanedWindow(i, orient= VERTICAL, height = 10, width = 30)
    p.pack()
    label = Label(p, text = 'Select a file with the clients firstname, lastname and email address')
    label.pack()
    about=Text(p, height = 1, width = 50)
    about.pack()
    fbtn= Button(p, text = "Upload File", command = lambda: file_update(about))
    fbtn.pack( expand = 1)
    emailbtn = Button(p, text = 'Send emails', command = lambda: read_csv(i) )
    emailbtn.pack(side = 'bottom')
    win_menu(i)
#############################################################
# Template for a new pop up window
#############################################################
def open_wind(i):
    i_win = Toplevel(i)
    i_win.attributes('-topmost',1)
    return i_win
#############################################################
#############################################################
# Template for the menu bar
#############################################################
def win_menu(i):
    menu= Menu(i)
    i.config(menu=menu)
    file= Menu(menu)
    view = Menu(menu)
    about = Menu(menu)

    file.add_command(label = 'exit', command = i.destroy)
    menu.add_cascade(label = 'File', menu = file)

    view.add_command(label = 'Full Screen',  command= lambda:i.geometry("{0}x{1}+0+0".format(i.winfo_screenwidth(), i.winfo_screenheight())))
    view.add_command(label = 'Original Size',  command= lambda:i.geometry('406x95'))
    menu.add_cascade(label = 'View', menu = view)

    about.add_command(label = 'Info',command = lambda:about_win(i))
    menu.add_cascade(label = 'About', menu = about)
#############################################################
#############################################################
# The pop up about window on the menu bar
#############################################################
def about_win(i):
    about_w = open_wind(i)
    about_w.geometry('400x150')
    about  = Text(about_w, height = 300, width = 300)
    about.insert('1.0','Created on:7/15/2019\nLast Updated: 7/15/2019\n Created to enable a fast reliable way to email multiple clients\nVersion Number: 0.5.0 \nInstructions: \n1. Select a CSV file that contains the recipents \n2. First Name, Last Name, and Email address\n3. click send emails and wait.')
    about.config(state= 'disable')
    about.pack()
    close_btn(about_w)
#############################################################
#############################################################
# Close button
#############################################################
def close_btn(i):
    btn= Button(i, text = 'close', command = i.destroy)
    btn.pack(side = 'bottom', expand = 1)
#############################################################
#############################################################
# File selection option
#############################################################
def select_file():
    name = askopenfilename(initialdir="C:/Users/",
                           filetypes =(("CSV File", "*.csv"),("Text File", "*.txt"),("All Files","*.*")),
                           title = "Choose a file.")
    set_file_name(name)
    #try:
        #with open(name,'r',newline = '') as UseFile:
            #print(UseFile.read())
    #except:
        #print("No file exists")
    set_file_name(name)
    return name
#############################################################
#############################################################
#############################################################
# set first name in global
#############################################################
def set_fname(i):
    global fname
    fname = i
#############################################################
#############################################################
# get first name from global
#############################################################
def get_fname():
    global fname
    return fname
#############################################################
#############################################################
# set last name in global
#############################################################
def set_lname(i):
    global lname
    lname = i
#############################################################
#############################################################
# get last name from global
#############################################################
def get_lname():
    global lname
    return lname
#############################################################
# set email in global
#############################################################
def set_email(i):
    global email
    email = i
#############################################################
#############################################################
# get email from global
#############################################################
def get_email():
    global email
    return email
#############################################################
def set_file_name(name):
    global filename
    filename = name
#############################################################
#############################################################
# get the file name function
#############################################################
def getFilename():
    global filename
    return filename
#############################################################
#############################################################
# Function to check if the email is in the current format
#############################################################
def checkEmail(email,fname, lname , i):
    format_email='^[_a-zA-Z0-9-]+(\.[_a-zA-Z0-9-]+)*@[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*(\.[a-z]{2,4})$'
    match = re.match(format_email, str(email))
    if match == None:
        email.delete('1.0', END)
        push_sub(email,i, email)
    else:
        send_email(email, fname, lname)
#############################################################
#############################################################
# Error message for if the code is in incorrect format
#############################################################
def push_sub(text, i, email):
    messagebox.showinfo('Error' , 'Incorrect email format for' + email + ', please correct the format')
#############################################################
#############################################################
# Setting up and sending an email
#############################################################
def send_email(rEmail, fname, lname):
    myemail = 'TestAutomated12@gmail.com'#needs to be swapped for teh permant email and password##############################################################################################
    mypassword = '1234567_AB'# your email password
    subject='[Auto Generated] ... '
    with open('AutoMessage.txt', 'r') as file:
        msg = file.read()
    msg = 'Dear ' + fname+' ' + lname+ ',\n'+ msg + '\nTime completed: ' + str(datetime.datetime.now())

    message = MIMEMultipart()
    message['From'] = myemail
    message['To'] = rEmail
    message['Subject']= subject
    message.attach(MIMEText(msg, 'plain'))

    server = smtplib.SMTP('smtp.gmail.com', 587) # if 587 doesn't work try 25 or 465 // office365 or gmail
    server.starttls()
    server.login(myemail, mypassword)
    text= message.as_string()
    server.sendmail(myemail, rEmail, text)
    server.quit()
#############################################################
#############################################################
# Reading from the CSV file
#############################################################
def read_csv(i):
    global email, fname,lname
    email_add = pd.read_csv(filename)
    email_length = len(email_add.index)
    k = open_wind(i)
    k.geometry('100x20')
    k.title = ('Sending Emails...')
    k.attributes('-topmost',1)
    pb = ttk.Progressbar(k,orient ="horizontal",length = 100, mode ="determinate")
    pb["maximum"] = 100
    pb["value"] = 0
    k.update_idletasks()
    pb.pack()
    pb_update = (100 / email_length)
    send_email_check(email_add,pb,pb_update,email_length,i, k)
    messagebox.showinfo('Finished' , 'All emails have been sent!')
#############################################################
#############################################################
# Loop to send the email through all recipents
#############################################################
def send_email_check(email_add, pb,ab, length,i, k):
    for x in range(length):
        set_fname(email_add['Name First'][x])
        set_lname(email_add['Name Last'][x])
        set_email(email_add['Email'][x])
        checkEmail(email,fname, lname, i)
        k.update_idletasks()
        pb["value"] = pb["value"] + ab
    k.destroy()
#############################################################
#############################################################
# Main function calls
#############################################################
def main():
    root = Tk()
    root.lift()
    main_win(root)
    root.mainloop()
#############################################################
#############################################################
start =datetime.datetime.now()
main()
end = datetime.datetime.now()
print('total time = ' + str(end - start))
#############################################################
#############################################################